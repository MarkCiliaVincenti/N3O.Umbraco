/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class DonationsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:5001";
    }

    getForm(id: string): Promise<DonationFormRes> {
        let url_ = this.baseUrl + "/umbraco/api/Donations/forms/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetForm(_response);
        });
    }

    protected processGetForm(response: Response): Promise<DonationFormRes> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <DonationFormRes>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : <ProblemDetails>JSON.parse(_responseText, this.jsonParseReviver);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DonationFormRes>(<any>null);
    }
}

export interface DonationFormRes {
    item?: Item | undefined;
    regular?: DonationOptionsRes | undefined;
    single?: DonationOptionsRes | undefined;
}

export interface Value {
}

export interface UmbracoContentOfFundDimension1Option extends Value {
    content?: IPublishedContent | undefined;
}

export interface IPublishedContent {
    id?: number;
    name?: string | undefined;
    urlSegment?: string | undefined;
    sortOrder?: number;
    level?: number;
    path?: string | undefined;
    templateId?: number | undefined;
    creatorId?: number;
    createDate?: Date;
    writerId?: number;
    updateDate?: Date;
    cultures?: { [key: string]: PublishedCultureInfo; } | undefined;
    itemType?: PublishedItemType;
    parent?: IPublishedContent | undefined;
    children?: IPublishedContent[] | undefined;
    childrenForAllCultures?: IPublishedContent[] | undefined;
}

export interface PublishedCultureInfo {
    culture?: string | undefined;
    name?: string | undefined;
    urlSegment?: string | undefined;
    date?: Date;
}

export enum PublishedItemType {
    Unknown = 0,
    Element = 1,
    Content = 2,
    Media = 3,
    Member = 4,
}

export interface UmbracoContentOfFundDimension2Option extends Value {
    content?: IPublishedContent | undefined;
}

export interface UmbracoContentOfFundDimension3Option extends Value {
    content?: IPublishedContent | undefined;
}

export interface UmbracoContentOfFundDimension4Option extends Value {
    content?: IPublishedContent | undefined;
}

export interface UmbracoContentOfDonationItem extends Value {
    content?: IPublishedContent | undefined;
}

export interface DonationOptionsRes {
    showQuantity?: boolean;
}

export interface ProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
}

export interface Anonymous extends UmbracoContentOfDonationItem {
    id?: string | undefined;
    name?: string | undefined;
}

export interface Item extends Anonymous {
    allowSingleDonations?: boolean;
    allowRegularDonations?: boolean;
    free?: boolean;
    price?: number;
    dimension1Options?: Dimension1Options[] | undefined;
    dimension2Options?: Dimension2Options[] | undefined;
    dimension3Options?: Dimension3Options[] | undefined;
    dimension4Options?: Dimension4Options[] | undefined;
}

export interface Anonymous6 extends UmbracoContentOfFundDimension1Option {
    id?: string | undefined;
    name?: string | undefined;
}

export interface Anonymous2 extends Anonymous6 {
    isUnrestricted?: boolean;
}

export interface Dimension1Options extends Anonymous2 {
}

export interface Anonymous7 extends UmbracoContentOfFundDimension2Option {
    id?: string | undefined;
    name?: string | undefined;
}

export interface Anonymous3 extends Anonymous7 {
    isUnrestricted?: boolean;
}

export interface Dimension2Options extends Anonymous3 {
}

export interface Anonymous8 extends UmbracoContentOfFundDimension3Option {
    id?: string | undefined;
    name?: string | undefined;
}

export interface Anonymous4 extends Anonymous8 {
    isUnrestricted?: boolean;
}

export interface Dimension3Options extends Anonymous4 {
}

export interface Anonymous9 extends UmbracoContentOfFundDimension4Option {
    id?: string | undefined;
    name?: string | undefined;
}

export interface Anonymous5 extends Anonymous9 {
    isUnrestricted?: boolean;
}

export interface Dimension4Options extends Anonymous5 {
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}